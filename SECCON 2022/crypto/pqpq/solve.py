from Crypto.Util.number import long_to_bytes
import math
e = 131074
n = 587926815910957928506680558951380405698765957736660571041732511939308424899531125274073420353104933723578377320050609109973567093301465914201779673281463229043539776071848986139657349676692718889679333084650490543298408820393827884588301690661795023628407437321580294262453190086595632660415087049509707898690300735866307908684649384093580089579066927072306239235691848372795522705863097316041992762430583002647242874432616919707048872023450089003861892443175057
c1 = 92883677608593259107779614675340187389627152895287502713709168556367680044547229499881430201334665342299031232736527233576918819872441595012586353493994687554993850861284698771856524058389658082754805340430113793873484033099148690745409478343585721548477862484321261504696340989152768048722100452380071775092776100545951118812510485258151625980480449364841902275382168289834835592610827304151460005023283820809211181376463308232832041617730995269229706500778999
c2 = 46236476834113109832988500718245623668321130659753618396968458085371710919173095425312826538494027621684566936459628333712619089451210986870323342712049966508077935506288610960911880157875515961210931283604254773154117519276154872411593688579702575956948337592659599321668773003355325067112181265438366718228446448254354388848428310614023369655106639341893255469632846938342940907002778575355566044700049191772800859575284398246115317686284789740336401764665472
cm = 357982930129036534232652210898740711702843117900101310390536835935714799577440705618646343456679847613022604725158389766496649223820165598357113877892553200702943562674928769780834623569501835458020870291541041964954580145140283927441757571859062193670500697241155641475887438532923910772758985332976303801843564388289302751743334888885607686066607804176327367188812325636165858751339661015759861175537925741744142766298156196248822715533235458083173713289585866

p = math.gcd(c1 + c2, n)
q = math.gcd(c1 - c2, n)
assert n % p == 0 and n % q == 0
r = n // (p * q)


# sagecell で
# mod(cm, p).sqrt(all=True), mod(cm, q).sqrt(all=True), mod(cm, r).sqrt(all=True)
# を実行し、各素因数に対する cm の平方剰余を求める
sqrt_cm_mod_p_arr = [2808415004342417472535489784285151726899488035581377746910855619764896925616370131254826941432074654629302410762459898065332716624587315421328482625709708,
                     4764012782352639798089355183359410882212644564219042549836333461155135433589625457129204600855709885377136145040534110623463257869097085155263920695220009]
sqrt_cm_mod_q_arr = [3505255395972154267761448617694891007211859720395890992569146044751635155301253956186252320583556066707432335903844117501984423930218920343822505357680714,
                     5104003500458056318762240337577903328349568378981536089053690310442370899268095723797598024333351944622769698609061235863646992321412386740216262978858143]
sqrt_cm_mod_r_arr = [24874744854798689873606113182880717824326977141769195572400782905412827012646312504014779587874274198864274886066098407143994333306051264411315691687199,
                     8993377129707051777777793399478948321486507452204039611715827587140163465984628186155142174366509016594688211791837041273560359376046094901187385370307654]


def extgcd(a, b):
    if b:
        d, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return d, x, y
    return a, 1, 0


def remainder(V):
    x = 0
    d = 1
    for X, Y in V:
        g, a, b = extgcd(d, Y)
        x, d = (Y*b*x + d*a*X) // g, d*(Y // g)
        x %= d
    return x, d

phi = (p-1)*(q-1)*(r-1)
e = e // 2
d = pow(e, -1, phi)

for sqrt_cm_mod_p in sqrt_cm_mod_p_arr:
    for sqrt_cm_mod_q in sqrt_cm_mod_q_arr:
        for sqrt_cm_mod_r in sqrt_cm_mod_r_arr:
            sqrt_cm, _ = remainder(
                [(sqrt_cm_mod_p, p), (sqrt_cm_mod_q, q), (sqrt_cm_mod_r, r)])
            assert pow(sqrt_cm, 2, n) == cm

            flag = long_to_bytes(pow(sqrt_cm, d, n))
            if b"SECCON{" in flag:
                print(flag[flag.find(b"SECCON{"):])
