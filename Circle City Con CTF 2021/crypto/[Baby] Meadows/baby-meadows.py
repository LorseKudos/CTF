from Crypto.Util.number import getStrongPrime
import sys, random; random.seed(0x1337)

def generate_key():
    p = getStrongPrime(2048)
    q = (p - 1) // 2
    for g in range(2, p - 1):
        if pow(g, 2, p) != 1 and pow(g, q, p) != 1:
            return g, p

def encrypt(msg):
    g, p = generate_key()

    g, p = 2, 27364195027981999497713610818487324581721539250673346091482772282510011564291025136146660508795219128557701709138115267357713678480331088419744185203212905091957459339614224615778653860885782170033046504718076905119565522298014609547550378271686461734952043412349624686487216938013960045889798734400260364799100295448466592570911013504023215177896840800637603090083812014709824090261242248660158815056130074711884192533210954160640493418715631256186934347998434364604226848641806710955394434610063365365212141903932895031496716774342948538753169437093579587734530974202008110362571844942019259309141601530779113813093
    yield (g, p)

    for m in msg:
        yield (m * pow(g, random.randrange(2, p - 1), p)) % p

if __name__ == "__main__":
    with open(sys.argv[1], "rb") as f:
        flag = f.read()
        print(list(encrypt(flag)))
